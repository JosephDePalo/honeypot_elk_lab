- name: ELK server installation and configuration
  hosts: elk_server
  become: yes
  tasks:
    - name: Register private IP address
      shell: hostname -I
      register: elk_server_ip

    - name: Update apt cache
      apt:
        update_cache: yes
    
    - name: Upgrade all packages
      apt:
        upgrade: yes
        autoclean: yes
        autoremove: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - gpg
          - jq

    - name: Download Elasticsearch GPG key
      get_url:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        dest: /tmp/GPG-KEY-elasticsearch
        mode: '0644'

    - name: Convert GPG key to keyring
      command: gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg /tmp/GPG-KEY-elasticsearch

    - name: Add Elasticsearch APT repository to sources list
      copy:
        content: "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main"
        dest: /etc/apt/sources.list.d/elastic-8.x.list
        owner: root
        group: root
        mode: '0644'

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install ELK stack
      apt:
        name:
          - elasticsearch
          - logstash
          - kibana

    - name: Set Elasticsearch host
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: "^#network.host"
        line: "network.host: localhost"
        state: present

    - name: Set Elasticsearch port
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: "^#http.port"
        line: "http.port: 9200"
        state: present

    - name: Set Elasticsearch to single node
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: "^#discovery.type"
        line: "discovery.type: single-node"
        state: present

    - name: Disable master node
      lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        regexp: "^cluster.initial_master_nodes"
        line: "#cluster.initial_master_nodes: []"
        state: present

    - name: Set Logstash to reload automatically
      lineinfile:
        path: /etc/logstash/logstash.yml
        regexp: "^#config.reload.automatic"
        line: "config.reload.automatic: true"
        state: present

    - name: Set Logstash reload interval
      lineinfile:
        path: /etc/logstash/logstash.yml
        regexp: "^#config.reload.interval"
        line: "config.reload.interval: 3s"
        state: present

    - name: Set Elasticsearch URL in Kibana
      lineinfile:
        path: /etc/kibana/kibana.yml
        regexp: "^#elasticsearch.hosts"
        line: "elasticsearch.hosts: [\"http://localhost:9200\"]"
        state: present

    - name: Enable and start Elasticsearch
      service:
        name: elasticsearch
        enabled: yes
        state: started

    - name: Generate Elasticsearch password
      command: /usr/share/elasticsearch/bin/elasticsearch-reset-password -abs -u elastic
      register: elastic_password

    - name: Query Elasticsearch for API key
      uri:
        url: "https://localhost:9200/_security/api_key"
        method: POST
        user: "elastic"
        password: "{{ elastic_password.stdout }}"
        body: |
          {
            "superuser": {
              "cluster": [
                "all"
              ],
              "indices": [
                {
                  "names": [
                    "*"
                  ],
                  "privileges": [
                    "all"
                  ],
                  "allow_restricted_indices": false
                },
                {
                  "names": [
                    "*"
                  ],
                  "privileges": [
                    "monitor",
                    "read",
                    "view_index_metadata",
                    "read_cross_cluster"
                  ],
                  "allow_restricted_indices": true
                }
              ],
              "applications": [],
              "run_as": [
                "*"
              ],
              "metadata": {},
              "transient_metadata": {
                "enabled": true
              },
              "remote_indices": [
                {
                  "names": [
                    "*"
                  ],
                  "privileges": [
                    "all"
                  ],
                  "allow_restricted_indices": false,
                  "clusters": [
                    "*"
                  ]
                },
                {
                  "names": [
                    "*"
                  ],
                  "privileges": [
                    "monitor",
                    "read",
                    "view_index_metadata",
                    "read_cross_cluster"
                  ],
                  "allow_restricted_indices": true,
                  "clusters": [
                    "*"
                  ]
                }
              ],
              "remote_cluster": [
                {
                  "privileges": [
                    "monitor_enrich",
                    "monitor_stats"
                  ],
                  "clusters": [
                    "*"
                  ]
                }
              ]
            }
          }
        headers:
          Content-Type: "application/json"
        validate_certs: no
      register: api_key_response

    - name: Decode the base64 encoded API key
      shell: echo "{{ api_key_response.json.encoded }}" | base64 --decode
      register: es_api_key

    - name: Print API key
      debug:
        msg: "Elasticsearch API Key: {{ es_api_key.stdout }}"

    - name: Create Logstash Filebeat configuration
      template:
        src: files/elk/logstash_beats.conf.j2
        dest: /etc/logstash/conf.d/beats.conf
        owner: root
        group: root
        mode: '0644' 

    - name: Enable and start Logstash
      service:
        name: logstash
        enabled: yes
        state: started

    - name: Generate Elasticsearch enrollment token
      shell: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
      register: enrollment_token

    - name: Setup Kibana
      shell: /usr/share/kibana/bin/kibana-setup --enrollment-token {{ enrollment_token.stdout }}

    - name: Change Kibana server host
      lineinfile:
        path: /etc/kibana/kibana.yml
        regexp: "^#server.host"
        line: "server.host: 0.0.0.0"
        state: present

    - name: Enable and start Kibana
      service:
        name: kibana
        enabled: yes
        state: started



- name: Honeypot installation and configuration
  hosts: honeypot
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: yes
        autoclean: yes
        autoremove: yes
    
    - name: Install required packages
      apt:
        name:
          - git
          - python3-venv
          - libssl-dev
          - libffi-dev
          - build-essential
          - libpython3-dev
          - python3-minimal
          - authbind

    - name: Create a user for the honeypot
      user:
        name: cowrie
        shell: /bin/bash
        home: /home/cowrie
        createhome: yes
    
    - name: Clone the cowrie repository
      git:
        repo: http://github.com/cowrie/cowrie
        dest: /cowrie

    - name: Change ownership of the /cowrie directory to the cowrie user
      file:
        path: /cowrie
        owner: cowrie
        group: cowrie
        recurse: true

    - name: Create a virtual environment for cowrie
      command: python3 -m venv /cowrie/cowrie-env

    - name: Upgrade pip
      pip:
        executable: /cowrie/cowrie-env/bin/pip
        name: pip
        state: latest

    - name: Install requirements
      pip:
        executable: /cowrie/cowrie-env/bin/pip
        requirements: /cowrie/requirements.txt

    - name: Create authbind file
      command: touch /etc/authbind/byport/22
    
    - name: Change ownership of the authbind file
      file:
        path: /etc/authbind/byport/22
        owner: cowrie
        group: cowrie

    - name: Change permissions of the authbind file
      command: chmod 770 /etc/authbind/byport/22
    
    - name: Edit sshd port
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#Port 22"
        line: "Port 2022"
        state: present

    - name: Copy cowrie configuration file
      command: cp /cowrie/etc/cowrie.cfg.dist /cowrie/etc/cowrie.cfg

    - name: Change cowrie port
      lineinfile:
        path: /cowrie/etc/cowrie.cfg
        regexp: "listen_endpoints = tcp:2222:interface=0.0.0.0"
        line: "listen_endpoints = systemd:domain=INET:index=0"
        state: present

    - name: Copy cowrie service file
      copy:
        src: files/honeypot/cowrie.service
        dest: /etc/systemd/system/cowrie.service

    - name: Copy cowrie socket file
      copy:
        src: files/honeypot/cowrie.socket
        dest: /etc/systemd/system/cowrie.socket

    - name: Restart sshd
      service:
        name: sshd
        state: restarted

    - name: Enable and start cowrie socket
      systemd:
        name: cowrie.socket
        enabled: yes
        state: started
    
    - name: Curl Filebeat
      get_url:
        url: https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.17.1-amd64.deb 
        dest: /tmp/filebeat-8.17.1-amd64.deb

    - name: Install Filebeat
      apt:
        deb: /tmp/filebeat-8.17.1-amd64.deb

    - name: Copy Filebeat configuration file
      template:
        src: files/honeypot/filebeat.yml.j2
        dest: /etc/filebeat/filebeat.yml
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start Filebeat
      service:
        name: filebeat
        enabled: yes
        state: started

    
